package {{ .ARPkg }}

import (
    "context"
    "log"

    "gopkg.in/vmihailenco/msgpack.v2"
    "gopkg.in/yaml.v3"
{{- range $ind, $imp := .Imports }}
{{ if ne $imp.ImportName "" }}{{ $imp.ImportName }} {{ end }}"{{ $imp.Path }}"
{{- end }}
{{- range $i, $imp := addImport .FieldList }}
    "{{ $imp }}"
{{- end }}
)

{{ $PublicStructName := .ARPkgTitle -}}
{{ $serializers := .Serializers -}}
{{ $fields := .FieldList }}
{{ $procfields := .ProcOutFieldList }}


type {{ $PublicStructName }}FT struct {
    {{- range $ind, $fstruct := .FieldList -}}
    {{ $rtype := $fstruct.Format -}}
    {{ $serlen := len $fstruct.Serializer -}}
    {{ if ne $serlen 0 -}}
    {{ $sname := index $fstruct.Serializer 0 -}}
    {{ $serializer := index $serializers $sname -}}
    {{ $rtype = $serializer.Type -}}
    {{ end }}
    {{ $fstruct.Name }} {{ $rtype -}} `yaml:"{{ $fstruct.Name | snakeCase -}}" mapstructure:"{{ $fstruct.Name | snakeCase -}}" json:"{{ $fstruct.Name | snakeCase -}}"`
    {{- end }}
}

func UnmarshalFixturesFromMessagePack(source []byte) ([]{{$PublicStructName}}FT, error) {
    var fts []{{$PublicStructName}}FT
    if err := msgpack.Unmarshal(source, &fts); err != nil {
        return nil, err
    }

    return fts, nil
}

func UnmarshalFixtures(source []byte) []*{{$PublicStructName}} {
    var fixtures []{{$PublicStructName}}FT

    if err := yaml.Unmarshal(source, &fixtures); err != nil {
        log.Fatalf("unmarshal {{$PublicStructName}}FT fixture: %v", err)
    }

    objs := make([]*{{$PublicStructName}}, 0, len(fixtures))

    for _, ft := range fixtures {

        o := New(context.Background())
        {{- range $ind, $fstruct := .FieldList }}
        if err := o.Set{{$fstruct.Name}}(ft.{{$fstruct.Name}}); err != nil {
            log.Fatalf("can't set value %v to field {{$fstruct.Name}} of {{$PublicStructName}} fixture: %s", ft.{{$fstruct.Name}}, err)
        }
        {{- end }}

        objs = append(objs, o)
    }

    return objs
}