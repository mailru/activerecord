// Code generated by mockery v2.20.0. DO NOT EDIT.

package activerecord

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockConfig is an autogenerated mock type for the ConfigInterface type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// GetBool provides a mock function with given fields: ctx, confPath, dfl
func (_m *MockConfig) GetBool(ctx context.Context, confPath string, dfl ...bool) bool {
	_va := make([]interface{}, len(dfl))
	for _i := range dfl {
		_va[_i] = dfl[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, confPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, ...bool) bool); ok {
		r0 = rf(ctx, confPath, dfl...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConfig_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfig_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - dfl ...bool
func (_e *MockConfig_Expecter) GetBool(ctx interface{}, confPath interface{}, dfl ...interface{}) *MockConfig_GetBool_Call {
	return &MockConfig_GetBool_Call{Call: _e.mock.On("GetBool",
		append([]interface{}{ctx, confPath}, dfl...)...)}
}

func (_c *MockConfig_GetBool_Call) Run(run func(ctx context.Context, confPath string, dfl ...bool)) *MockConfig_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConfig_GetBool_Call) Return(_a0 bool) *MockConfig_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetBool_Call) RunAndReturn(run func(context.Context, string, ...bool) bool) *MockConfig_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoolIfExists provides a mock function with given fields: ctx, confPath
func (_m *MockConfig) GetBoolIfExists(ctx context.Context, confPath string) (bool, bool) {
	ret := _m.Called(ctx, confPath)

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, bool)); ok {
		return rf(ctx, confPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, confPath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, confPath)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockConfig_GetBoolIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoolIfExists'
type MockConfig_GetBoolIfExists_Call struct {
	*mock.Call
}

// GetBoolIfExists is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
func (_e *MockConfig_Expecter) GetBoolIfExists(ctx interface{}, confPath interface{}) *MockConfig_GetBoolIfExists_Call {
	return &MockConfig_GetBoolIfExists_Call{Call: _e.mock.On("GetBoolIfExists", ctx, confPath)}
}

func (_c *MockConfig_GetBoolIfExists_Call) Run(run func(ctx context.Context, confPath string)) *MockConfig_GetBoolIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfig_GetBoolIfExists_Call) Return(value bool, ok bool) *MockConfig_GetBoolIfExists_Call {
	_c.Call.Return(value, ok)
	return _c
}

func (_c *MockConfig_GetBoolIfExists_Call) RunAndReturn(run func(context.Context, string) (bool, bool)) *MockConfig_GetBoolIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function with given fields: ctx, confPath, dfl
func (_m *MockConfig) GetDuration(ctx context.Context, confPath string, dfl ...time.Duration) time.Duration {
	_va := make([]interface{}, len(dfl))
	for _i := range dfl {
		_va[_i] = dfl[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, confPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context, string, ...time.Duration) time.Duration); ok {
		r0 = rf(ctx, confPath, dfl...)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockConfig_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockConfig_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - dfl ...time.Duration
func (_e *MockConfig_Expecter) GetDuration(ctx interface{}, confPath interface{}, dfl ...interface{}) *MockConfig_GetDuration_Call {
	return &MockConfig_GetDuration_Call{Call: _e.mock.On("GetDuration",
		append([]interface{}{ctx, confPath}, dfl...)...)}
}

func (_c *MockConfig_GetDuration_Call) Run(run func(ctx context.Context, confPath string, dfl ...time.Duration)) *MockConfig_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]time.Duration, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(time.Duration)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConfig_GetDuration_Call) Return(_a0 time.Duration) *MockConfig_GetDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetDuration_Call) RunAndReturn(run func(context.Context, string, ...time.Duration) time.Duration) *MockConfig_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetDurationIfExists provides a mock function with given fields: ctx, confPath
func (_m *MockConfig) GetDurationIfExists(ctx context.Context, confPath string) (time.Duration, bool) {
	ret := _m.Called(ctx, confPath)

	var r0 time.Duration
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (time.Duration, bool)); ok {
		return rf(ctx, confPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, confPath)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, confPath)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockConfig_GetDurationIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDurationIfExists'
type MockConfig_GetDurationIfExists_Call struct {
	*mock.Call
}

// GetDurationIfExists is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
func (_e *MockConfig_Expecter) GetDurationIfExists(ctx interface{}, confPath interface{}) *MockConfig_GetDurationIfExists_Call {
	return &MockConfig_GetDurationIfExists_Call{Call: _e.mock.On("GetDurationIfExists", ctx, confPath)}
}

func (_c *MockConfig_GetDurationIfExists_Call) Run(run func(ctx context.Context, confPath string)) *MockConfig_GetDurationIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfig_GetDurationIfExists_Call) Return(_a0 time.Duration, _a1 bool) *MockConfig_GetDurationIfExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetDurationIfExists_Call) RunAndReturn(run func(context.Context, string) (time.Duration, bool)) *MockConfig_GetDurationIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: ctx, confPath, dfl
func (_m *MockConfig) GetInt(ctx context.Context, confPath string, dfl ...int) int {
	_va := make([]interface{}, len(dfl))
	for _i := range dfl {
		_va[_i] = dfl[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, confPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) int); ok {
		r0 = rf(ctx, confPath, dfl...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockConfig_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfig_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - dfl ...int
func (_e *MockConfig_Expecter) GetInt(ctx interface{}, confPath interface{}, dfl ...interface{}) *MockConfig_GetInt_Call {
	return &MockConfig_GetInt_Call{Call: _e.mock.On("GetInt",
		append([]interface{}{ctx, confPath}, dfl...)...)}
}

func (_c *MockConfig_GetInt_Call) Run(run func(ctx context.Context, confPath string, dfl ...int)) *MockConfig_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConfig_GetInt_Call) Return(_a0 int) *MockConfig_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetInt_Call) RunAndReturn(run func(context.Context, string, ...int) int) *MockConfig_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntIfExists provides a mock function with given fields: ctx, confPath
func (_m *MockConfig) GetIntIfExists(ctx context.Context, confPath string) (int, bool) {
	ret := _m.Called(ctx, confPath)

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, bool)); ok {
		return rf(ctx, confPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, confPath)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, confPath)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockConfig_GetIntIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntIfExists'
type MockConfig_GetIntIfExists_Call struct {
	*mock.Call
}

// GetIntIfExists is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
func (_e *MockConfig_Expecter) GetIntIfExists(ctx interface{}, confPath interface{}) *MockConfig_GetIntIfExists_Call {
	return &MockConfig_GetIntIfExists_Call{Call: _e.mock.On("GetIntIfExists", ctx, confPath)}
}

func (_c *MockConfig_GetIntIfExists_Call) Run(run func(ctx context.Context, confPath string)) *MockConfig_GetIntIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfig_GetIntIfExists_Call) Return(_a0 int, _a1 bool) *MockConfig_GetIntIfExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetIntIfExists_Call) RunAndReturn(run func(context.Context, string) (int, bool)) *MockConfig_GetIntIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastUpdateTime provides a mock function with given fields:
func (_m *MockConfig) GetLastUpdateTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockConfig_GetLastUpdateTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastUpdateTime'
type MockConfig_GetLastUpdateTime_Call struct {
	*mock.Call
}

// GetLastUpdateTime is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetLastUpdateTime() *MockConfig_GetLastUpdateTime_Call {
	return &MockConfig_GetLastUpdateTime_Call{Call: _e.mock.On("GetLastUpdateTime")}
}

func (_c *MockConfig_GetLastUpdateTime_Call) Run(run func()) *MockConfig_GetLastUpdateTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetLastUpdateTime_Call) Return(_a0 time.Time) *MockConfig_GetLastUpdateTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetLastUpdateTime_Call) RunAndReturn(run func() time.Time) *MockConfig_GetLastUpdateTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: ctx, confPath, dfl
func (_m *MockConfig) GetString(ctx context.Context, confPath string, dfl ...string) string {
	_va := make([]interface{}, len(dfl))
	for _i := range dfl {
		_va[_i] = dfl[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, confPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) string); ok {
		r0 = rf(ctx, confPath, dfl...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfig_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - dfl ...string
func (_e *MockConfig_Expecter) GetString(ctx interface{}, confPath interface{}, dfl ...interface{}) *MockConfig_GetString_Call {
	return &MockConfig_GetString_Call{Call: _e.mock.On("GetString",
		append([]interface{}{ctx, confPath}, dfl...)...)}
}

func (_c *MockConfig_GetString_Call) Run(run func(ctx context.Context, confPath string, dfl ...string)) *MockConfig_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConfig_GetString_Call) Return(_a0 string) *MockConfig_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetString_Call) RunAndReturn(run func(context.Context, string, ...string) string) *MockConfig_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringIfExists provides a mock function with given fields: ctx, confPath
func (_m *MockConfig) GetStringIfExists(ctx context.Context, confPath string) (string, bool) {
	ret := _m.Called(ctx, confPath)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool)); ok {
		return rf(ctx, confPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, confPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, confPath)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockConfig_GetStringIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringIfExists'
type MockConfig_GetStringIfExists_Call struct {
	*mock.Call
}

// GetStringIfExists is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
func (_e *MockConfig_Expecter) GetStringIfExists(ctx interface{}, confPath interface{}) *MockConfig_GetStringIfExists_Call {
	return &MockConfig_GetStringIfExists_Call{Call: _e.mock.On("GetStringIfExists", ctx, confPath)}
}

func (_c *MockConfig_GetStringIfExists_Call) Run(run func(ctx context.Context, confPath string)) *MockConfig_GetStringIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfig_GetStringIfExists_Call) Return(_a0 string, _a1 bool) *MockConfig_GetStringIfExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetStringIfExists_Call) RunAndReturn(run func(context.Context, string) (string, bool)) *MockConfig_GetStringIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetStrings provides a mock function with given fields: ctx, confPath, dfl
func (_m *MockConfig) GetStrings(ctx context.Context, confPath string, dfl []string) []string {
	ret := _m.Called(ctx, confPath, dfl)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, confPath, dfl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockConfig_GetStrings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStrings'
type MockConfig_GetStrings_Call struct {
	*mock.Call
}

// GetStrings is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - dfl []string
func (_e *MockConfig_Expecter) GetStrings(ctx interface{}, confPath interface{}, dfl interface{}) *MockConfig_GetStrings_Call {
	return &MockConfig_GetStrings_Call{Call: _e.mock.On("GetStrings", ctx, confPath, dfl)}
}

func (_c *MockConfig_GetStrings_Call) Run(run func(ctx context.Context, confPath string, dfl []string)) *MockConfig_GetStrings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockConfig_GetStrings_Call) Return(_a0 []string) *MockConfig_GetStrings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetStrings_Call) RunAndReturn(run func(context.Context, string, []string) []string) *MockConfig_GetStrings_Call {
	_c.Call.Return(run)
	return _c
}

// GetStruct provides a mock function with given fields: ctx, confPath, valuePtr
func (_m *MockConfig) GetStruct(ctx context.Context, confPath string, valuePtr interface{}) (bool, error) {
	ret := _m.Called(ctx, confPath, valuePtr)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, confPath, valuePtr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, confPath, valuePtr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, confPath, valuePtr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStruct'
type MockConfig_GetStruct_Call struct {
	*mock.Call
}

// GetStruct is a helper method to define mock.On call
//   - ctx context.Context
//   - confPath string
//   - valuePtr interface{}
func (_e *MockConfig_Expecter) GetStruct(ctx interface{}, confPath interface{}, valuePtr interface{}) *MockConfig_GetStruct_Call {
	return &MockConfig_GetStruct_Call{Call: _e.mock.On("GetStruct", ctx, confPath, valuePtr)}
}

func (_c *MockConfig_GetStruct_Call) Run(run func(ctx context.Context, confPath string, valuePtr interface{})) *MockConfig_GetStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockConfig_GetStruct_Call) Return(_a0 bool, _a1 error) *MockConfig_GetStruct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetStruct_Call) RunAndReturn(run func(context.Context, string, interface{}) (bool, error)) *MockConfig_GetStruct_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfig(t mockConstructorTestingTNewMockConfig) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
